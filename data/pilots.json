[
  {
    "id": "forma-carbon-tracker",
    "title": "Forma Carbon Footprint Tracker",
    "sector": "Environmental",
    "tags": ["carbon", "sustainability", "dashboard", "compliance"],
    "oneLiner": "Track and visualize corporate carbon emissions with automated reporting and reduction recommendations",
    "stack": ["Next.js", "Python", "PostgreSQL", "Chart.js"],
    "kpis": ["30% reduction in reporting time", "Real-time emission tracking", "Compliance dashboard"],
    "feasibility": "solo-90-day",
    "wheelRisk": 3,
    "problem": "Organizations struggle to track carbon emissions across multiple facilities and supply chains. Manual data collection is error-prone and time-consuming. Compliance reporting requires significant manual effort.",
    "approach": "Build a dashboard that ingests utility bills and operational data, applies emission factors, and generates visualizations. Use pre-built carbon calculation libraries and focus on UX for data input and report generation.",
    "oneWeek": "Scope Sprint: Define data sources (utility bills, transportation logs). Prototype a single-facility dashboard mockup. Identify 3 key emission categories to track. Map out data flow from input to visualization.",
    "ninetyDay": "Deliver MVP with multi-facility tracking, CSV import, automated monthly reports, and basic reduction recommendations. Include compliance export templates for common frameworks (GHG Protocol, CDP).",
    "risks": ["Data quality depends on manual input", "Emission factor databases may require licensing", "Scope creep into supply chain tracking"],
    "buyVsBuild": "Consider: Watershed, Persefoni (enterprise focus, $$$). Build if you need customization for specific industry or internal integration with existing systems.",
    "emb": [0.2, 0.8, 0.3, 0.6, 0.9, 0.1, 0.4, 0.7]
  },
  {
    "id": "qorus-proposal-assistant",
    "title": "QorusDocs Proposal Assistant",
    "sector": "Internal",
    "tags": ["proposals", "automation", "AI", "content-generation"],
    "oneLiner": "AI-powered proposal generator that assembles RFP responses from past wins and company knowledge base",
    "stack": ["Next.js", "OpenAI API", "Vector DB", "PostgreSQL"],
    "kpis": ["50% faster proposal drafting", "90% content reuse from past wins", "Consistent brand voice"],
    "feasibility": "solo-90-day",
    "wheelRisk": 4,
    "problem": "Sales teams spend 40+ hours on each RFP response, duplicating work from previous proposals. Content is scattered across drives. No easy way to find the 'best answer' to common questions. Proposals lack consistency in tone and formatting.",
    "approach": "Build a RAG system that indexes past proposals, case studies, and company collateral. LLM generates first drafts based on RFP requirements. Include human-in-the-loop editing and approval workflow.",
    "oneWeek": "Scope Sprint: Audit 10 recent proposals to identify repeating sections (exec summary, team bios, case studies). Define content taxonomy. Prototype a simple Q&A interface over 2-3 sample documents using OpenAI embeddings.",
    "ninetyDay": "Launch with knowledge base of 50+ past proposals indexed, section-by-section generation, smart search for past answers, Word export, and basic approval routing. Training session for sales team.",
    "risks": ["Hallucination in generated content requires review", "Embedding cost for large doc corpus", "Integration with CRM/Salesforce may be complex"],
    "buyVsBuild": "Consider: Qvidian, RFPIO, Loopio ($10k-50k/year). Build if you have unique compliance needs or want tighter integration with internal knowledge systems.",
    "emb": [0.9, 0.2, 0.7, 0.4, 0.3, 0.8, 0.6, 0.5]
  },
  {
    "id": "rag-knowledge-chat",
    "title": "RAG Knowledge Chat for Support",
    "sector": "Internal",
    "tags": ["support", "chatbot", "RAG", "documentation"],
    "oneLiner": "Internal support chatbot that answers employee questions using company docs, policies, and wikis",
    "stack": ["Next.js", "LangChain", "Pinecone", "OpenAI API"],
    "kpis": ["70% deflection of Tier-1 tickets", "Sub-5s response time", "85%+ answer accuracy"],
    "feasibility": "solo-90-day",
    "wheelRisk": 5,
    "problem": "HR and IT support teams field repetitive questions (password resets, PTO policy, expense reports). Knowledge scattered across Confluence, SharePoint, Notion. Employees can't find answers quickly, leading to ticket backlog.",
    "approach": "Index company documentation into a vector database. Build a chat interface with RAG pipeline. Include citation links to source documents. Track unanswered questions to improve knowledge base over time.",
    "oneWeek": "Scope Sprint: Identify top 20 FAQ topics from support ticket history. Map documentation sources (Confluence, Google Drive, etc.). Build proof-of-concept with 10 sample docs and basic chat UI. Test retrieval quality.",
    "ninetyDay": "Deploy chatbot with 200+ documents indexed, Slack integration, analytics dashboard showing deflection rate, feedback loop for bad answers, and admin panel to add/update content sources.",
    "risks": ["Answer quality depends on doc quality and freshness", "User adoption requires change management", "API costs scale with usage"],
    "buyVsBuild": "Consider: Glean, Guru, Capacity ($15-30/user/month). Build if you need on-prem deployment or deep customization for specialized internal processes.",
    "emb": [0.7, 0.5, 0.9, 0.2, 0.4, 0.6, 0.8, 0.3]
  },
  {
    "id": "smart-meter-analytics",
    "title": "Smart Meter Analytics Platform",
    "sector": "Energy",
    "tags": ["IoT", "energy", "analytics", "real-time"],
    "oneLiner": "Real-time energy consumption analytics for commercial buildings with anomaly detection",
    "stack": ["React", "TimescaleDB", "Python", "MQTT"],
    "kpis": ["15% energy cost reduction", "Real-time alerts", "Predictive maintenance"],
    "feasibility": "configure",
    "wheelRisk": 6,
    "problem": "Building managers lack visibility into real-time energy consumption patterns. Anomalies (equipment failures, inefficiencies) go undetected for weeks. Manual meter reading is inefficient.",
    "approach": "Integrate with existing smart meters via MQTT/API, store time-series data, build anomaly detection models, and create dashboards for facility managers.",
    "oneWeek": "Scope Sprint: Identify meter hardware/protocols in use. Define key metrics (kWh, demand peaks, power factor). Mockup dashboard with sample data. Map data pipeline from meter to DB.",
    "ninetyDay": "Connect 10-50 meters, real-time dashboards, email/SMS alerts for anomalies, historical trend analysis, and basic predictive models for maintenance scheduling.",
    "risks": ["Hardware integration complexity", "Data security for critical infrastructure", "Requires domain expertise in energy systems"],
    "buyVsBuild": "Consider: EnergyCAP, Schneider Electric EcoStruxure. Build for custom integration with existing BMS or unique analytics requirements.",
    "emb": [0.3, 0.6, 0.4, 0.8, 0.2, 0.9, 0.5, 0.7]
  },
  {
    "id": "transit-routing-optimizer",
    "title": "Transit Route Optimization Tool",
    "sector": "Transportation",
    "tags": ["routing", "optimization", "mapping", "logistics"],
    "oneLiner": "Optimize public transit routes based on ridership data and traffic patterns",
    "stack": ["Vue.js", "PostGIS", "GraphQL", "Mapbox"],
    "kpis": ["20% reduction in wait times", "10% fuel savings", "Improved coverage"],
    "feasibility": "configure",
    "wheelRisk": 7,
    "problem": "Transit agencies operate on legacy routes that don't reflect current demand patterns. Peak-hour congestion causes delays. Limited data-driven approach to route planning.",
    "approach": "Ingest ridership data, traffic patterns, and demographic info. Use optimization algorithms (genetic algorithms, simulated annealing) to propose improved routes. Visualize on interactive maps.",
    "oneWeek": "Scope Sprint: Gather historical ridership data (GTFS feeds). Define optimization objectives (coverage, wait time, cost). Prototype route visualization on map with sample data.",
    "ninetyDay": "Tool that analyzes current routes, proposes 3-5 optimized alternatives, estimates impact on KPIs, and exports route plans in GTFS format for agency systems.",
    "risks": ["Requires access to proprietary agency data", "Political/community resistance to route changes", "Complex optimization may need OR expertise"],
    "buyVsBuild": "Consider: Remix (by Via), Optibus. Build if you need tight integration with legacy CAD/AVL systems or custom constraints.",
    "emb": [0.5, 0.3, 0.6, 0.7, 0.8, 0.2, 0.4, 0.9]
  },
  {
    "id": "water-leak-detection",
    "title": "Water Leak Detection System",
    "sector": "Water",
    "tags": ["IoT", "sensors", "alerts", "maintenance"],
    "oneLiner": "IoT-based leak detection for municipal water systems with predictive alerts",
    "stack": ["Python", "InfluxDB", "TensorFlow", "Grafana"],
    "kpis": ["30% reduction in water loss", "Early leak detection", "Cost savings"],
    "feasibility": "configure",
    "wheelRisk": 8,
    "problem": "Municipal water systems lose 20-30% of water to leaks. Traditional detection relies on manual inspections or customer complaints. By the time leaks are found, significant damage has occurred.",
    "approach": "Deploy acoustic sensors and pressure monitors throughout the distribution network. Use ML to detect anomalies indicating leaks. Alert crews with location and severity estimates.",
    "oneWeek": "Scope Sprint: Identify sensor types and placement strategy. Define leak signatures (pressure drops, flow anomalies). Review historical leak data to understand patterns.",
    "ninetyDay": "Pilot with 50-100 sensor nodes, real-time monitoring dashboard, ML-based leak detection, mobile app for field crews, and integration with work order systems.",
    "risks": ["Hardware deployment costs and logistics", "False positive rate affects crew efficiency", "Harsh environment may damage sensors"],
    "buyVsBuild": "Consider: Xylem, Echologics, Fathom. Build if you have unique network topology or want to integrate with existing SCADA systems.",
    "emb": [0.4, 0.7, 0.5, 0.3, 0.9, 0.6, 0.2, 0.8]
  },
  {
    "id": "building-permit-tracker",
    "title": "Digital Building Permit Tracker",
    "sector": "Buildings",
    "tags": ["compliance", "workflow", "automation", "permitting"],
    "oneLiner": "Streamline building permit applications and track approval workflows digitally",
    "stack": ["Next.js", "PostgreSQL", "AWS S3", "Twilio"],
    "kpis": ["50% faster permit processing", "Digital-first workflow", "Transparency for applicants"],
    "feasibility": "solo-90-day",
    "wheelRisk": 4,
    "problem": "Building permit processes are paper-based, slow, and opaque. Applicants don't know status. Staff manually route applications through multiple reviewers. Document storage is chaotic.",
    "approach": "Build a web portal for applicants to submit permits with document uploads. Workflow engine routes to appropriate reviewers (zoning, fire, structural). Track status and send notifications.",
    "oneWeek": "Scope Sprint: Map current permit process (roles, review steps). Define application form fields for common permit types (residential, commercial). Prototype status dashboard.",
    "ninetyDay": "Launch with online application forms, automated routing, email/SMS notifications, reviewer dashboard, document management, and public-facing status lookup.",
    "risks": ["Integration with legacy municipal systems", "User adoption by staff requires training", "Legal requirements for digital signatures"],
    "buyVsBuild": "Consider: OpenGov, Accela, CityGrows. Build if you need deep customization for local ordinances or want to own the platform long-term.",
    "emb": [0.6, 0.4, 0.8, 0.5, 0.3, 0.7, 0.9, 0.2]
  },
  {
    "id": "ev-charging-network",
    "title": "EV Charging Network Manager",
    "sector": "Transportation",
    "tags": ["EV", "charging", "fleet", "energy"],
    "oneLiner": "Manage and optimize electric vehicle charging for municipal fleets",
    "stack": ["React", "Node.js", "OCPP", "Redis"],
    "kpis": ["20% charging cost reduction", "95% uptime", "Fleet readiness tracking"],
    "feasibility": "configure",
    "wheelRisk": 6,
    "problem": "Municipal EV fleets lack centralized charging management. Vehicles may not be charged for next shift. No visibility into charger status or energy costs. Demand charges spike unpredictably.",
    "approach": "Integrate with EV chargers via OCPP protocol. Schedule charging during off-peak hours. Monitor vehicle battery state and schedule readiness. Provide dashboard for fleet managers.",
    "oneWeek": "Scope Sprint: Identify charger models and protocols. Define vehicle scheduling requirements. Prototype dashboard showing charger status and vehicle SOC. Map out load management logic.",
    "ninetyDay": "System managing 20-50 chargers, automated scheduling based on shift needs and energy pricing, real-time status monitoring, usage reports, and mobile app for drivers.",
    "risks": ["OCPP protocol compatibility varies by manufacturer", "Load management requires coordination with utility", "Hardware failures require field support"],
    "buyVsBuild": "Consider: ChargePoint, Greenlots, EV Connect. Build if you need custom fleet scheduling or integration with existing fleet management systems.",
    "emb": [0.8, 0.2, 0.4, 0.9, 0.5, 0.3, 0.7, 0.6]
  },
  {
    "id": "wastewater-treatment-monitor",
    "title": "Wastewater Treatment Monitor",
    "sector": "Water",
    "tags": ["monitoring", "compliance", "sensors", "environmental"],
    "oneLiner": "Real-time monitoring of wastewater treatment processes with compliance reporting",
    "stack": ["Python", "InfluxDB", "FastAPI", "Plotly"],
    "kpis": ["100% compliance with EPA limits", "Early warning of upsets", "Reduced manual sampling"],
    "feasibility": "configure",
    "wheelRisk": 7,
    "problem": "Wastewater treatment plants rely on periodic manual sampling. Process upsets can lead to permit violations and fines. Operators lack real-time visibility into treatment performance.",
    "approach": "Install sensors for key parameters (pH, dissolved oxygen, turbidity, ammonia). Stream data to cloud platform. Alert operators when parameters approach permit limits. Generate compliance reports automatically.",
    "oneWeek": "Scope Sprint: Identify critical parameters and permit limits. Map sensor placement in treatment process. Define alert thresholds. Review historical upset events to understand patterns.",
    "ninetyDay": "Deploy sensors for 5-10 key parameters, real-time dashboard, automated alerts via SMS/email, historical trend analysis, and automated monthly compliance reports.",
    "risks": ["Sensor calibration and maintenance in harsh environment", "Integration with existing SCADA may be complex", "Regulatory approval for automated reporting"],
    "buyVsBuild": "Consider: Hach, Endress+Hauser, Xylem. Build if you need custom integration with legacy SCADA or specialized reporting for local regulations.",
    "emb": [0.3, 0.8, 0.2, 0.6, 0.7, 0.4, 0.5, 0.9]
  },
  {
    "id": "hvac-optimization-engine",
    "title": "HVAC Optimization Engine",
    "sector": "Buildings",
    "tags": ["HVAC", "optimization", "energy", "ML"],
    "oneLiner": "AI-driven HVAC optimization to reduce energy costs while maintaining comfort",
    "stack": ["Python", "TensorFlow", "BACnet", "TimescaleDB"],
    "kpis": ["25% energy savings", "Comfort complaints reduced", "Predictive maintenance"],
    "feasibility": "configure",
    "wheelRisk": 8,
    "problem": "HVAC systems in large buildings operate on simple schedules, wasting energy when spaces are unoccupied or over-conditioning. Manual tuning is time-consuming and suboptimal.",
    "approach": "Integrate with building management system (BMS) via BACnet. Use ML to learn occupancy patterns and thermal dynamics. Optimize setpoints and schedules in real-time to minimize energy use while meeting comfort targets.",
    "oneWeek": "Scope Sprint: Audit BMS capabilities and data access. Define comfort metrics (temp, humidity, CO2). Collect baseline energy and occupancy data. Prototype simple rule-based optimization.",
    "ninetyDay": "ML model trained on building data, automated setpoint adjustments, A/B testing framework to validate savings, dashboard showing energy vs. comfort tradeoffs, and ROI reporting.",
    "risks": ["BMS integration complexity varies by vendor", "Comfort is subjective; occupant complaints possible", "Model requires months of data for training"],
    "buyVsBuild": "Consider: BrainBox AI, Verdigris, 75F. Build if you have in-house ML expertise and want full control over optimization algorithms.",
    "emb": [0.5, 0.6, 0.9, 0.3, 0.4, 0.8, 0.2, 0.7]
  },
  {
    "id": "citizen-request-portal",
    "title": "Citizen Request Portal (311)",
    "sector": "Internal",
    "tags": ["311", "citizen-engagement", "workflow", "mobile"],
    "oneLiner": "Modern 311 system for citizens to report issues and track resolution",
    "stack": ["Next.js", "PostgreSQL", "AWS S3", "Mapbox"],
    "kpis": ["30% increase in request volume", "50% faster resolution", "Citizen satisfaction score"],
    "feasibility": "solo-90-day",
    "wheelRisk": 3,
    "problem": "Citizens rely on phone calls to report issues (potholes, graffiti, broken streetlights). No visibility into status or resolution. Staff manually track requests in spreadsheets. Duplicate reports are common.",
    "approach": "Build web and mobile app for citizens to submit requests with photos and location. Backend workflow routes to appropriate departments. Public dashboard shows request status. Deduplication based on location.",
    "oneWeek": "Scope Sprint: Define request categories and routing rules. Prototype mobile-friendly submission form with photo upload and map picker. Design staff dashboard for triaging and assignment.",
    "ninetyDay": "Launch with citizen portal (web + PWA), staff dashboard, automated routing, email/SMS updates, analytics on request volume and resolution time, and public map of open requests.",
    "risks": ["User adoption requires marketing campaign", "Integration with existing work order systems", "Spam and low-quality submissions"],
    "buyVsBuild": "Consider: SeeClickFix, PublicStuff, CitySourced. Build if you want deeper integration with internal systems or custom workflows for local needs.",
    "emb": [0.7, 0.3, 0.6, 0.8, 0.2, 0.5, 0.9, 0.4]
  },
  {
    "id": "asset-inventory-tracker",
    "title": "Asset Inventory Tracker",
    "sector": "Internal",
    "tags": ["asset-management", "inventory", "QR", "mobile"],
    "oneLiner": "Track municipal assets (vehicles, equipment, facilities) with QR codes and mobile app",
    "stack": ["React Native", "PostgreSQL", "Node.js", "QR"],
    "kpis": ["100% asset visibility", "Maintenance schedule compliance", "Reduced asset loss"],
    "feasibility": "solo-90-day",
    "wheelRisk": 2,
    "problem": "Departments lack centralized visibility into assets (vehicles, computers, machinery). Maintenance is reactive rather than preventive. Assets go missing or are underutilized. Spreadsheet tracking is error-prone.",
    "approach": "Build asset registry with QR code labeling. Mobile app for field staff to scan and update asset info (location, condition, maintenance). Automated maintenance reminders based on usage/time.",
    "oneWeek": "Scope Sprint: Define asset categories and key attributes. Design QR code labeling scheme. Prototype mobile scanning interface and asset detail view. Map out maintenance scheduling logic.",
    "ninetyDay": "Deploy with asset registry of 500+ items, QR code generation and printing, mobile app for iOS/Android, maintenance scheduling, usage tracking, and reports on asset utilization and value.",
    "risks": ["Requires upfront effort to tag all assets", "User adoption by field staff", "Integration with procurement/finance systems for asset lifecycle"],
    "buyVsBuild": "Consider: Asset Panda, Snipe-IT (open-source), EZOfficeInventory. Build if you need custom fields for specialized equipment or tight integration with existing systems.",
    "emb": [0.4, 0.5, 0.7, 0.2, 0.8, 0.3, 0.6, 0.9]
  },
  {
    "id": "stormwater-runoff-model",
    "title": "Stormwater Runoff Modeler",
    "sector": "Environmental",
    "tags": ["stormwater", "modeling", "GIS", "compliance"],
    "oneLiner": "Model stormwater runoff and design green infrastructure to meet MS4 permits",
    "stack": ["Python", "QGIS", "PostgreSQL", "Leaflet"],
    "kpis": ["Compliance with MS4 permit", "20% runoff reduction", "Cost-effective GI design"],
    "feasibility": "configure",
    "wheelRisk": 7,
    "problem": "Municipalities must comply with MS4 stormwater permits but lack tools to model runoff and design green infrastructure. Manual calculations are time-consuming. Hard to evaluate cost-effectiveness of different interventions.",
    "approach": "Build GIS-based tool that models runoff based on land cover, soils, and rainfall. Simulate impact of green infrastructure (rain gardens, permeable pavement). Optimize interventions to meet permit requirements at lowest cost.",
    "oneWeek": "Scope Sprint: Gather GIS data (land cover, soils, drainage areas). Define modeling approach (rational method, SWMM, or simplified). Prototype map interface showing runoff hotspots.",
    "ninetyDay": "Tool that models baseline runoff, allows user to place GI interventions on map, calculates reduction in runoff volume, estimates cost, and generates compliance reports for permit submittals.",
    "risks": ["Requires GIS and hydrology expertise", "Model accuracy depends on data quality", "Permit requirements vary by jurisdiction"],
    "buyVsBuild": "Consider: EPA SWMM, WinSLAMM, commercial GI design tools. Build if you need custom workflows for local permit requirements or integration with municipal GIS.",
    "emb": [0.6, 0.9, 0.3, 0.4, 0.5, 0.7, 0.8, 0.2]
  },
  {
    "id": "solar-feasibility-tool",
    "title": "Solar Feasibility Assessment Tool",
    "sector": "Energy",
    "tags": ["solar", "renewable", "ROI", "GIS"],
    "oneLiner": "Assess solar PV feasibility for municipal buildings and generate ROI projections",
    "stack": ["Next.js", "Python", "NREL PVWatts API", "Mapbox"],
    "kpis": ["Identify top 10 sites for solar", "ROI < 10 years", "GHG reduction estimate"],
    "feasibility": "solo-90-day",
    "wheelRisk": 4,
    "problem": "Municipalities want to install solar but don't know which buildings are best candidates. Manual feasibility studies are expensive ($5-10k per site). Hard to prioritize investments across portfolio of buildings.",
    "approach": "Build tool that takes building addresses, pulls roof data from GIS/imagery, estimates solar potential using NREL API, calculates costs and incentives, and generates ROI projections. Rank sites by payback period.",
    "oneWeek": "Scope Sprint: Identify building portfolio and energy data sources. Test NREL PVWatts API with sample sites. Define cost assumptions ($/watt, incentives). Prototype ROI calculation spreadsheet.",
    "ninetyDay": "Tool that analyzes 50-100 buildings, generates feasibility reports with solar potential, cost, savings, payback period, and GHG reduction. Export prioritized list and site-specific proposals for procurement.",
    "risks": ["Roof suitability (age, structural capacity) requires site visits", "Utility rate structures affect ROI calculation", "Incentive landscape changes frequently"],
    "buyVsBuild": "Consider: Aurora Solar, Helioscope (focus on design, not feasibility screening). Build if you need bulk screening of large building portfolios or custom financial modeling.",
    "emb": [0.8, 0.4, 0.5, 0.7, 0.3, 0.6, 0.2, 0.9]
  },
  {
    "id": "recycling-contamination-detector",
    "title": "Recycling Contamination Detector",
    "sector": "Environmental",
    "tags": ["recycling", "computer-vision", "waste", "ML"],
    "oneLiner": "Use computer vision to detect contamination in recycling streams and educate residents",
    "stack": ["Python", "TensorFlow", "OpenCV", "Raspberry Pi"],
    "kpis": ["15% reduction in contamination", "Resident education", "MRF processing efficiency"],
    "feasibility": "configure",
    "wheelRisk": 6,
    "problem": "Contamination (plastic bags, food waste) in recycling streams is costly. Material recovery facilities (MRFs) reject contaminated loads, sending them to landfill. Residents lack real-time feedback on what they're recycling incorrectly.",
    "approach": "Install cameras on recycling trucks or at drop-off sites. Use computer vision to identify contaminants. Send automated feedback to residents (e.g., 'Plastic bag detected in your recycling'). Track contamination rates over time.",
    "oneWeek": "Scope Sprint: Define common contaminants to detect. Collect sample images of recycling bins. Prototype ML model to classify items (paper, plastic, glass, contaminant). Test accuracy on sample data.",
    "ninetyDay": "Deploy pilot on 5-10 recycling trucks, train model on local data, automated feedback system (email/app notification), dashboard showing contamination trends, and resident education campaigns.",
    "risks": ["Model accuracy depends on training data quality", "Privacy concerns with camera deployment", "Hardware installation on trucks requires coordination with hauler"],
    "buyVsBuild": "Consider: Compology, Rubicon, specialized waste tech startups. Build if you want to own the ML pipeline or integrate tightly with local hauler operations.",
    "emb": [0.5, 0.7, 0.8, 0.3, 0.6, 0.2, 0.9, 0.4]
  }
]

